{% extends "base.twig" %}

{% block title %}Home page{% endblock %}

{% block content %}
    <section class="section">

        <h1 class="title bigTitle is-1">Welcome to LSteam!</h1>
        <h2 class="subtitle is-3">LSteam is <span class="subtitle is-3 mainTitle"></span></h2>
        <br>
        <p class="block">LSteam is a video game digital distribution service by Valve. It was launched as a standalone
            software
            client in September 2003
            as a way for Valve to provide automatic updates for their games, and expanded to include games
            from
            third-party publishers.
        </p>
        <p class="block">LSteam
            has also expanded into an online web-based and mobile digital storefront. Steam offers digital
            rights
            management (DRM), server hosting
            , video streaming, and social networking services. It also provides the user with installation
            and
            automatic updating of games, and
            community features such as friends lists and groups, cloud storage, and in-game voice and chat
            functionality.
        </p>
    </section>

    <script>

        const phrases = [
            "the best games in the market",
            "the biggest game store in the web",
            "the greatest game collection ever seen",
            "the gastest webpage in history",
            "the coolest game store",
            "a great community to buy games",
            "impressive",
            "amazing",
            "just great",
            "full of content",
            "daily updated",
            "good for you"
        ];

        // ——————————————————————————————————————————————————
        // TextScramble
        // ——————————————————————————————————————————————————

        class TextScramble {
            constructor(el) {
                this.el = el;
                this.chars = '!<>-_\\/[]{}—=+*^?#_ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                this.update = this.update.bind(this);
            }

            setText(newText) {
                const oldText = this.el.innerText;
                const length = Math.max(oldText.length, newText.length);
                const promise = new Promise(resolve => this.resolve = resolve);
                this.queue = [];
                for (let i = 0; i < length; i++) {
                    const from = oldText[i] || '';
                    const to = newText[i] || '';
                    const start = Math.floor(Math.random() * 40);
                    const end = start + Math.floor(Math.random() * 40);
                    this.queue.push({
                        from,
                        to,
                        start,
                        end
                    });
                }
                cancelAnimationFrame(this.frameRequest);
                this.frame = 0;
                this.update();
                return promise;
            }

            update() {
                let output = '';
                let complete = 0;
                for (let i = 0, n = this.queue.length; i < n; i++) {
                    let {
                        from,
                        to,
                        start,
                        end,
                        char
                    } = this.queue[i];
                    if (this.frame >= end) {
                        complete++;
                        output += to;
                    } else if (this.frame >= start) {
                        if (!char || Math.random() < 0.28) {
                            char = this.randomChar();
                            this.queue[i].char = char;
                        }
                        output += `<span class="mainTitleSpecial">${char}</span>`;
                    } else {
                        output += from;
                    }
                }
                this.el.innerHTML = output;
                if (complete === this.queue.length) {
                    this.resolve();
                } else {
                    this.frameRequest = requestAnimationFrame(this.update);
                    this.frame++;
                }
            }

            randomChar() {
                return this.chars[Math.floor(Math.random() * this.chars.length)];
            }
        }

        window.addEventListener('load', function () {

            const el = document.querySelector('.mainTitle');
            const fx = new TextScramble(el);

            let counter = 0;
            const next = () => {
                // una a una
                //fx.setText(phrases[counter]).then(() => {
                // Random
                fx.setText(phrases[Math.floor(Math.random() * phrases.length)]).then(() => {

                    setTimeout(next, 1500);
                });
                counter = (counter + 1) % phrases.length;
            };
            next();

        }, false);

    </script>

{% endblock %}